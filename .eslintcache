[{"/Users/artemdigtiar/Desktop/todo/my_todo_list_v2/src/Components/Form.jsx":"1","/Users/artemdigtiar/Desktop/todo/my_todo_list_v2/src/App.js":"2","/Users/artemdigtiar/Desktop/todo/my_todo_list_v2/src/reportWebVitals.js":"3","/Users/artemdigtiar/Desktop/todo/my_todo_list_v2/src/Components/List.jsx":"4","/Users/artemdigtiar/Desktop/todo/my_todo_list_v2/src/Components/Tabs.jsx":"5","/Users/artemdigtiar/Desktop/todo/my_todo_list_v2/src/index.js":"6","/Users/artemdigtiar/Desktop/todo/my_todo_list_v2/src/Components/Task.jsx":"7"},{"size":1256,"mtime":1610087956352,"results":"8","hashOfConfig":"9"},{"size":4434,"mtime":1610433986186,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1607664504474,"results":"11","hashOfConfig":"9"},{"size":1006,"mtime":1608702716451,"results":"12","hashOfConfig":"9"},{"size":750,"mtime":1608185993572,"results":"13","hashOfConfig":"9"},{"size":500,"mtime":1607664504473,"results":"14","hashOfConfig":"9"},{"size":1693,"mtime":1610432751927,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"rtmjmo",{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/artemdigtiar/Desktop/todo/my_todo_list_v2/src/Components/Form.jsx",[],"/Users/artemdigtiar/Desktop/todo/my_todo_list_v2/src/App.js",["31"],"import React, {useState, useEffect} from \"react\"\nimport './App.css';\nimport Form from \"./Components/Form\"\nimport List from \"./Components/List\"\nimport Tabs from \"./Components/Tabs\"\n\n\nfunction App() {\n\n\n    // Declare state variables\n    const [taskList, setTaskList] = useState([]);\n    const [currentTab, setCurrentTab] = useState(\"all\");\n    const [description, setDescription] = useState('');\n    const [editableTask, setEditableTask] = useState('');\n    const [editableTaskText, setEditableTaskText] = useState('');\n\n\n    useEffect(() => {\n        fetch(\"https://5fec128e573752001730b0f1.mockapi.io/todo\")\n            .then(response => response.json())\n            .then(tasks => setTaskList(tasks))\n            .catch((error => console.error(error)))\n    }, []);\n\n\n    function onclickTaskContainerHandler(e) {\n\n        let btnAttr = e.target.dataset.btn;\n        if (!btnAttr) {\n            return\n        }\n\n        let taskId = e.target.closest(\"[data-id]\").dataset.id;\n\n        switch (btnAttr) {\n            case \"edit\":\n                setEditableTaskText(taskList.find(task => task.id === taskId).description);\n                setEditableTask(taskId);\n                break;\n            case \"confirmEdit\":\n                const specs = {\n                    method: \"PUT\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                    },\n                    body: JSON.stringify({\n                        description: editableTaskText\n                    })\n                };\n\n                fetch(`https://5fec128e573752001730b0f1.mockapi.io/todo/${taskId}`, specs)\n                    .then(response => response.json())\n                    .then(response => setTaskList(taskList.map(task => task.id === response.id ?\n                        {\n                            ...task, description: response.description\n                        } : task)))\n                    .then(() => {\n                        setEditableTask(null)\n                        setEditableTaskText(\"\")\n                    });\n\n                break;\n\n            case \"delete\":\n                fetch(`https://5fec128e573752001730b0f1.mockapi.io/todo/${taskId}`, {method: \"DELETE\"})\n                    .then(response => response.json())\n                    .then(response => setTaskList(taskList.filter(task => task.id !== response.id)));\n                break;\n\n            case \"done\":\n                const completed = taskList.find(task => task.id === taskId).completed;\n                const options = {\n                    method: \"PUT\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify({\n                        completed: !completed\n                    })\n\n                };\n                fetch(`https://5fec128e573752001730b0f1.mockapi.io/todo/${taskId}`, options)\n                    .then(response => response.json())\n                    .then(response => setTaskList(taskList.map(task => task.id === response.id ?\n                        {\n                            ...task, completed: response.completed\n                        } : task)))\n\n                break;\n        }\n\n    }\n\n    function onChangeEditableTask(e) {\n        setEditableTaskText(e.target.value)\n    }\n\n\n    function onClickTabsHandler(e) {\n        let attr = e.target.dataset.tab;\n\n\n        if (attr === \"all\") {\n            setCurrentTab(\"all\")\n        }\n\n        if (attr === \"completed\") {\n            setCurrentTab(\"completed\")\n        }\n\n        if (attr === \"uncompleted\") {\n            setCurrentTab(\"uncompleted\")\n        }\n\n    }\n\n\n    return (\n        <>\n            <Form\n                taskList={taskList}\n                setTaskList={setTaskList}\n                description={description}\n                setDescription={setDescription}/>\n            <Tabs\n                currentTab={currentTab}\n                onClickTabsHandler={onClickTabsHandler}/>\n            <List\n                onChangeEditableTask={onChangeEditableTask}\n                editableTaskText={editableTaskText}\n                setEditableTask={setEditableTask}\n                editableTask={editableTask}\n                taskList={taskList}\n                currentTab={currentTab}\n                onclickTaskContainerHandler={onclickTaskContainerHandler}\n            />\n        </>\n    );\n}\n\nexport default App;\n","/Users/artemdigtiar/Desktop/todo/my_todo_list_v2/src/reportWebVitals.js",[],"/Users/artemdigtiar/Desktop/todo/my_todo_list_v2/src/Components/List.jsx",["32"],"/Users/artemdigtiar/Desktop/todo/my_todo_list_v2/src/Components/Tabs.jsx",[],"/Users/artemdigtiar/Desktop/todo/my_todo_list_v2/src/index.js",[],"/Users/artemdigtiar/Desktop/todo/my_todo_list_v2/src/Components/Task.jsx",[],{"ruleId":"33","severity":1,"message":"34","line":36,"column":9,"nodeType":"35","messageId":"36","endLine":91,"endColumn":10},{"ruleId":"37","severity":1,"message":"38","line":1,"column":16,"nodeType":"39","messageId":"40","endLine":1,"endColumn":24},"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-unused-vars","'Fragment' is defined but never used.","Identifier","unusedVar"]